#!/bin/bash
#
# seedCode traverses a set of directories to build code tarballs required for
# the service containers

# NOTE: checkout the master branch of this project with:
#  A. code version i.e. 1.1.4.5
#  B. then again with environment, 1.1.4.5-prod
#  These brancher will be used for DevOps - container names

# SRC - where a local copy of the source code is for a given release
# TGT - this project

# SRC=/home/aprowse/Clients/Sofvie/source
SRC=/home/edwinperez/SofvieMasterCode
TGT=$(pwd)/docker
REPOSITORY=repo.sofvie.com:5000

# check releases
CURR=`pwd`
cd $SRC
for DIR in `ls -d */ | sed 's/\///g'` ; do
  cd $SRC/$DIR
  BRANCH=`git branch --show-current`
  printf '%.15s %s\n' "$DIR........................" $BRANCH
  cd $CURR
done

echo; echo "does this look correct?"
select yn in "Yes" "No"; do
  case $yn in
    Yes ) break;;
    No  ) exit 1;;
  esac
done

# VER is taken from the first part of the branch name, i.e. `1.1.4.5`
VER=`git branch --show-current`

# Set the version level in each of the Dockerfiles
sed -i "s/VERSION/$VER/g" docker/*/Dockerfile*
sed -i "s/REPOSITORY/$REPOSITORY/g" docker/*/Dockerfile*
sed -i "s/REPOSITORY/$REPOSITORY/g" docker/*/updateImage

# Loop through the following source directories to create the source code tarballs
for BRANCH in api app mobile reports-app resources sqllistener sso ; do
  # create the target directory for the Dockerfile
  mkdir -p $TGT/$BRANCH/data
  DIR=$SRC/$BRANCH/
  # app has a different directory structure
  if [ "$BRANCH" == "app" ] ; then
    DIR=$SRC/$BRANCH/APP
  fi
  cd $DIR
  # Create the tarball
  tar czf $TGT/$BRANCH/data/$BRANCH-$VER.tar.gz \
    --exclude=".git" --exclude=".gitignore" \
    * .[a-z,A-Z]* > /dev/null 2>&1
  # Update the Dockerfile with the name of the tarfile
  sed -i "s/PAYLOAD/$BRANCH-$VER.tar.gz/g" $TGT/$BRANCH/Dockerfile*
  echo created $BRANCH-$VER.tar.gz
done

